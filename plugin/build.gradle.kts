/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    kotlin("jvm") version embeddedKotlinVersion
    // jitpack & gradle portal
    `maven-publish`

    `kotlin-dsl`

    id("com.gradle.plugin-publish") version "0.16.0"
}

group = "elect86"
version = "0.0.1"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform(kotlin("bom", embeddedKotlinVersion)))

    // Use the Kotlin JDK 8 standard library.
    implementation(kotlin("stdlib-jdk8"))

    implementation(projects.core)

    // Use the Kotlin test library.
    testImplementation(kotlin("test"))

    // Use the Kotlin JUnit integration.
    testImplementation(kotlin("test-junit"))
}

pluginBundle {
    website = "https://github.com/elect86/gik/tree/master"
    vcsUrl = "https://github.com/elect86/gik.git"
    tags = listOf("gik")
}

gradlePlugin {
    // Define the plugin
    plugins.create("gik") {
        id = "elect86.gik"
        displayName = "gik plugin"
        description = "The Kotlin way to use Git"
        implementationClass = "main.GikPlugin"
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations.getByName("functionalTestImplementation").extendsFrom(configurations.getByName("testImplementation"))

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

val check by tasks.getting(Task::class) {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

publishing {
    publications.register("mavenJava", MavenPublication::class) {
        artifactId = "gik"
        from(components["java"])
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}